name: User Service CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/user-service/**'
      - '.github/workflows/core-services/user-service.yml'
  pull_request:
    branches: [main]
    paths:
      - 'services/user-service/**'

env:
  SERVICE_NAME: user-service
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/user-service

jobs:
  test:
    name: Test User Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/user-service/package-lock.json

      - name: Install dependencies
        run: |
          cd services/user-service
          npm ci

      - name: Run linting
        run: |
          cd services/user-service
          npm run lint

      - name: Run unit tests
        run: |
          cd services/user-service
          npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: |
          cd services/user-service
          npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Generate test coverage
        run: |
          cd services/user-service
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: services/user-service/coverage/lcov.info
          flags: user-service
          name: user-service-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'services/user-service'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          cd services/user-service
          npm audit --audit-level moderate

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/user-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            SERVICE_VERSION=${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-southeast-1 --name getit-staging-cluster

      - name: Deploy to staging
        run: |
          cd infrastructure/kubernetes/deployments/core-services
          kubectl set image deployment/user-service-deployment \
            user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }} \
            --namespace=staging
          
          kubectl rollout status deployment/user-service-deployment --namespace=staging --timeout=300s

      - name: Run health checks
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/user-service-deployment --namespace=staging
          
          # Health check
          kubectl get pods -l app=user-service --namespace=staging
          
          # Test endpoint
          SERVICE_URL=$(kubectl get service user-service --namespace=staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f http://$SERVICE_URL/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-southeast-1 --name getit-production-cluster

      - name: Blue-Green Deployment
        run: |
          cd infrastructure/kubernetes/deployments/core-services
          
          # Create green deployment
          sed 's/user-service-deployment/user-service-deployment-green/g' user-service-deployment.yaml > user-service-deployment-green.yaml
          kubectl apply -f user-service-deployment-green.yaml --namespace=production
          
          # Update green deployment image
          kubectl set image deployment/user-service-deployment-green \
            user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} \
            --namespace=production
          
          # Wait for green deployment
          kubectl rollout status deployment/user-service-deployment-green --namespace=production --timeout=300s
          
          # Health check green deployment
          kubectl wait --for=condition=available --timeout=300s deployment/user-service-deployment-green --namespace=production
          
          # Switch traffic to green
          kubectl patch service user-service-service \
            -p '{"spec":{"selector":{"version":"green"}}}' \
            --namespace=production
          
          # Wait for traffic switch
          sleep 30
          
          # Verify green deployment
          SERVICE_URL=$(kubectl get service user-service-service --namespace=production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f http://$SERVICE_URL/health || exit 1
          
          # Clean up blue deployment
          kubectl delete deployment user-service-deployment --namespace=production || true

      - name: Bangladesh Compliance Check
        run: |
          # Verify data residency
          kubectl exec -it deployment/user-service-deployment-green --namespace=production -- \
            curl -s http://localhost:8080/compliance/data-residency | jq .bangladesh_compliant
          
          # Check audit logging
          kubectl logs deployment/user-service-deployment-green --namespace=production | grep "AUDIT"

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took