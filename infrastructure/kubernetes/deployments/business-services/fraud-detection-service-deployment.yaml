apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection-service-deployment
  namespace: getit-production
  labels:
    app: fraud-detection-service
    tier: business-service
    component: security-ai
    version: v1.0.0
    environment: production
    security-level: critical
    compliance: pci-dss
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: fraud-detection-service
  template:
    metadata:
      labels:
        app: fraud-detection-service
        tier: business-service
        component: security-ai
        version: v1.0.0
        security-level: critical
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        linkerd.io/inject: enabled
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "fraud-detection"
        vault.hashicorp.com/agent-inject-secret-ml-keys: "secret/fraud-detection/ml-keys"
    spec:
      serviceAccountName: fraud-detection-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 3000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: fraud-detection-service
        image: getit/fraud-detection-service:v1.0.0
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: health
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        - name: HEALTH_PORT
          value: "8081"
        - name: LOG_LEVEL
          value: "warn"
        - name: ENCRYPTION_ENABLED
          value: "true"
        - name: AUDIT_LOGGING_ENABLED
          value: "true"
        - name: ML_INFERENCE_TIMEOUT
          value: "500ms"
        - name: RISK_SCORE_THRESHOLD
          value: "0.7"
        - name: REAL_TIME_SCORING_ENABLED
          value: "true"
        - name: BATCH_PROCESSING_ENABLED
          value: "true"
        - name: FEATURE_EXTRACTION_ENABLED
          value: "true"
        - name: MODEL_REFRESH_INTERVAL
          value: "1h"
        - name: ANOMALY_DETECTION_ENABLED
          value: "true"
        - name: BEHAVIORAL_ANALYSIS_ENABLED
          value: "true"
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: url
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: fraud-detection-secrets
              key: postgres-url
        - name: ML_MODEL_API_KEY
          valueFrom:
            secretKeyRef:
              name: fraud-detection-secrets
              key: ml-api-key
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: fraud-detection-secrets
              key: encryption-key
        envFrom:
        - configMapRef:
            name: fraud-detection-service-config
        - secretRef:
            name: fraud-detection-service-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: health
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: health
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: ml-models-volume
          mountPath: /app/models
          readOnly: true
        - name: audit-logs-volume
          mountPath: /app/audit-logs
        - name: temp-volume
          mountPath: /tmp
        - name: vault-secrets
          mountPath: /vault/secrets
          readOnly: true
      - name: model-updater-sidecar
        image: getit/model-updater:v1.0.0
        env:
        - name: MODEL_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: fraud-detection-service-config
              key: model-registry-url
        - name: UPDATE_INTERVAL
          value: "3600"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: ml-models-volume
          mountPath: /models
      - name: audit-exporter
        image: getit/audit-exporter:v1.0.0
        env:
        - name: AUDIT_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: fraud-detection-service-config
              key: audit-endpoint
        - name: EXPORT_INTERVAL
          value: "60"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: audit-logs-volume
          mountPath: /audit-logs
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: fraud-detection-service-config
      - name: ml-models-volume
        persistentVolumeClaim:
          claimName: fraud-detection-models-pvc
      - name: audit-logs-volume
        persistentVolumeClaim:
          claimName: fraud-detection-audit-pvc
      - name: temp-volume
        emptyDir: {}
      - name: vault-secrets
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: security-optimized
        security-level: high
      tolerations:
      - key: "security-workload"
        operator: Equal
        value: "critical"
        effect: NoSchedule
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - fraud-detection-service
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: security-level
                operator: In
                values:
                - high
                - critical